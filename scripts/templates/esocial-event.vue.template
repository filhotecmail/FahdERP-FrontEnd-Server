<template>
  <div class="esocial-event-{{kebabName}}">
    <div class="event-header">
      <h2 class="event-title">
        <Icon :name="'{{iconPath}}'" class="event-icon" />
        {{title}} - {{eventCode}}
      </h2>
      <p class="event-description">{{description}}</p>
    </div>

    <div class="event-content">
      <form @submit.prevent="handleSubmit" class="esocial-form">
        <!-- Campos específicos do evento serão adicionados aqui -->
        <div class="form-section">
          <h3>Informações do Evento</h3>
          
          <div class="form-group">
            <label for="ideEvento">ID do Evento:</label>
            <input 
              id="ideEvento"
              v-model="form.ideEvento"
              type="text"
              class="form-control"
              required
            />
          </div>

          <div class="form-group">
            <label for="indRetif">Indicativo de Retificação:</label>
            <select 
              id="indRetif"
              v-model="form.indRetif"
              class="form-control"
            >
              <option value="1">Arquivo original</option>
              <option value="2">Arquivo de retificação</option>
            </select>
          </div>

          <div class="form-group">
            <label for="nrRecibo">Número do Recibo:</label>
            <input 
              id="nrRecibo"
              v-model="form.nrRecibo"
              type="text"
              class="form-control"
            />
          </div>
        </div>

        <!-- Seção para campos específicos do evento -->
        <div class="form-section">
          <h3>Dados Específicos</h3>
          <!-- Adicionar campos específicos baseados no tipo de evento -->
        </div>

        <div class="form-actions">
          <button type="button" @click="handleCancel" class="btn btn-secondary">
            Cancelar
          </button>
          <button type="submit" class="btn btn-primary" :disabled="isLoading">
            <span v-if="isLoading" class="loading-spinner"></span>
            {{ isLoading ? 'Processando...' : 'Enviar Evento' }}
          </button>
        </div>
      </form>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, reactive } from 'vue'
import { useRouter } from 'vue-router'
import Icon from '@/components/ui/Icon.vue'

// Props
interface Props {
  eventCode?: string
  initialData?: Record<string, any>
}

const props = withDefaults(defineProps<Props>(), {
  eventCode: '{{eventCode}}',
  initialData: () => ({})
})

// Composables
const router = useRouter()

// State
const isLoading = ref(false)
const form = reactive({
  ideEvento: '',
  indRetif: '1',
  nrRecibo: '',
  ...props.initialData
})

// Methods
const handleSubmit = async () => {
  try {
    isLoading.value = true
    
    // Implementar lógica de envio do evento eSocial
    console.log('Enviando evento {{eventCode}}:', form)
    
    // Simular chamada da API
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    // Redirecionar após sucesso
    router.push('/esocial/eventos')
  } catch (error) {
    console.error('Erro ao enviar evento:', error)
  } finally {
    isLoading.value = false
  }
}

const handleCancel = () => {
  router.back()
}

// Lifecycle
// Adicionar lógica de inicialização se necessário
</script>

<style scoped>
.esocial-event-{{kebabName}} {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
}

.event-header {
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 2px solid var(--color-border);
}

.event-title {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin: 0 0 0.5rem 0;
  font-size: 1.75rem;
  font-weight: 600;
  color: var(--color-heading);
}

.event-icon {
  width: 2rem;
  height: 2rem;
  color: var(--color-primary);
}

.event-description {
  margin: 0;
  color: var(--color-text-light);
  font-size: 1.1rem;
}

.event-content {
  background: var(--color-background-soft);
  border-radius: 8px;
  padding: 2rem;
}

.esocial-form {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.form-section {
  background: white;
  border-radius: 6px;
  padding: 1.5rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.form-section h3 {
  margin: 0 0 1.5rem 0;
  font-size: 1.25rem;
  font-weight: 600;
  color: var(--color-heading);
  border-bottom: 1px solid var(--color-border);
  padding-bottom: 0.5rem;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-group:last-child {
  margin-bottom: 0;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: var(--color-text);
}

.form-control {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid var(--color-border);
  border-radius: 4px;
  font-size: 1rem;
  transition: border-color 0.2s ease;
}

.form-control:focus {
  outline: none;
  border-color: var(--color-primary);
  box-shadow: 0 0 0 2px rgba(var(--color-primary-rgb), 0.1);
}

.form-actions {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  padding-top: 1rem;
  border-top: 1px solid var(--color-border);
}

.btn {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 4px;
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.btn-primary {
  background-color: var(--color-primary);
  color: white;
}

.btn-primary:hover:not(:disabled) {
  background-color: var(--color-primary-dark);
}

.btn-secondary {
  background-color: var(--color-background-mute);
  color: var(--color-text);
  border: 1px solid var(--color-border);
}

.btn-secondary:hover {
  background-color: var(--color-background-soft);
}

.loading-spinner {
  width: 1rem;
  height: 1rem;
  border: 2px solid transparent;
  border-top: 2px solid currentColor;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

/* Responsive */
@media (max-width: 768px) {
  .esocial-event-{{kebabName}} {
    padding: 1rem;
  }
  
  .event-content {
    padding: 1rem;
  }
  
  .form-section {
    padding: 1rem;
  }
  
  .form-actions {
    flex-direction: column;
  }
  
  .btn {
    width: 100%;
    justify-content: center;
  }
}
</style>